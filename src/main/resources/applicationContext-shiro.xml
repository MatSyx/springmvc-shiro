<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- Root Context: defines shared resources visible to all other web components -->
    <!--shiro-ehcache -->
    <bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache-shiro.xml"/>
    </bean>
    <bean id="myRealm" class="com.aaron.realm.MyRealm">
        <!--<property name="credentialsMatcher" ref="credentialsMatcher" />-->
        <property name="cachingEnabled" value="true"/>
        <!--<property name="cacheManager" ref="shiroEhcacheManager"/>-->
        <property name="authenticationCachingEnabled" value="true"/>
        <property name="authenticationCacheName" value="authenticationCache"/>
        <property name="authorizationCachingEnabled" value="true"/>
        <property name="authorizationCacheName" value="authorizationCache"/>
    </bean>
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <property name="realm" ref="myRealm"/>
        <!-- By default the servlet container sessions will be used.  Uncomment this line
             to use shiro's native sessions (see the JavaDoc for more): -->
        <!-- <property name="sessionMode" value="native"/> -->
        <property name="cacheManager" ref="shiroEhcacheManager"/>
    </bean>

    <!--filterChainDefinitions参数说明,注意其验证顺序是自上而下-->
    <!--=================================================================================================-->
    <!--anon	    org.apache.shiro.web.filter.authc.AnonymousFilter-->
    <!--authc	    org.apache.shiro.web.filter.authc.FormAuthenticationFilter-->
    <!--authcBasic	org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter-->
    <!--perms	    org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter-->
    <!--port	    org.apache.shiro.web.filter.authz.PortFilter-->
    <!--rest	    org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter-->
    <!--roles	    org.apache.shiro.web.filter.authz.RolesAuthorizationFilter-->
    <!--ssl	        org.apache.shiro.web.filter.authz.SslFilter-->
    <!--user	    org.apache.shiro.web.filter.authc.UserFilter-->
    <!--=================================================================================================-->
    <!--anon: 例子/admins/**=anon 没有参数，表示可以匿名使用。-->
    <!--authc: 例如/admins/user/**=authc表示需要认证(登录)才能使用，没有参数-->
    <!--roles： 例子/admins/user/**=roles[admin],参数可以写多个，多个时必须加上引号，-->
    <!--并且参数之间用逗号分割，当有多个参数时，例如admins/user/**=roles["admin,guest"],-->
    <!--每个参数通过才算通过，相当于hasAllRoles()方法。-->
    <!--perms： 例子/admins/user/**=perms[user:add:*],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，-->
    <!--例如/admins/user/**=perms["user:add:*,user:modify:*"]，当有多个参数时必须每个参数都通过才通过，-->
    <!--想当于isPermitedAll()方法。-->
    <!--rest：  例子/admins/user/**=rest[user],根据请求的方法，相当于/admins/user/**=perms[user:method] ,-->
    <!--其中method为post，get，delete等。-->
    <!--port：  例子/admins/user/**=port[8081],当请求的url的端口不是8081是跳转到schemal://serverName:8081?queryString,-->
    <!--其中schmal是协议http或https等，serverName是你访问的host,8081是url配置里port的端口，queryString是你访问的url里的？后面的参数。-->
    <!--authcBasic：例如/admins/user/**=authcBasic没有参数表示httpBasic认证-->
    <!--ssl:  例子/admins/user/**=ssl没有参数，表示安全的url请求，协议为https-->
    <!--user: 例如/admins/user/**=user没有参数表示必须存在用户，当登入操作时不做检查-->
    <!--注：anon，authcBasic，auchc，user是认证过滤器，-->
    <!--perms，roles，ssl，rest，port是授权过滤器-->
    <!--=================================================================================================-->
    <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login"/>
        <!--<property name="successUrl" value="/"/>-->
        <property name="unauthorizedUrl" value="/unauthorized"/>
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
        <!-- defined will be automatically acquired and available via its beanName in chain        -->
        <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
        <!-- <property name="filters">
            <util:map>
                <entry key="anAlias" value-ref="someFilter"/>
            </util:map>
        </property> -->
        <property name="filterChainDefinitions">
            <value>
                /login=anon
                /captcha=anon
                /adminUnauthorized = roles[admin]
                /** = authc
            </value>
        </property>
    </bean>

    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after -->
    <!-- the lifecycleBeanProcessor has run: -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
</beans>